trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DownloadSecureFile@1
  displayName: Download Token
  name: gmsToken
  inputs:
    secureFile: 'google-services.json'
- bash: mv $(gmsToken.secureFilePath) '$(Build.SourcesDirectory)/app/'; echo 'GOOGLE_MAPS_API_KEY="$(MAP_KEY)"' >> '$(Build.SourcesDirectory)/gradle.properties'
  displayName: 'Manipulate secure credentials'
- task: Gradle@2
  displayName: Build the Gradle project
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'assembleDebug'
- task: Gradle@2
  displayName: Run unit tests
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'testDebugUnitTest'
- task: CopyFiles@2
  displayName: Copy APK files
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/app/build/outputs/apk/'
    contents: '**/*.apk'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: Upload APK files to artifact storage
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: apk
- bash: ./.ci/push_javadoc.sh
  displayName: Generate Javadoc
  env:
    PUSH_CRED: $(PUSH_CRED)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
